# Stage 1: Build the application
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build

WORKDIR /src

# Copy csproj and restore as distinct layers
COPY MatthewsGalaxy.Server/*.csproj ./MatthewsGalaxy.Server/

# Restore dependencies
WORKDIR /src/MatthewsGalaxy.Server
RUN dotnet restore

WORKDIR /src
COPY MatthewsGalaxy.Server/ ./MatthewsGalaxy.Server/

# Build the application
WORKDIR /src/MatthewsGalaxy.Server
RUN dotnet build "MatthewsGalaxy.Server.csproj" -c Release -o /app/build

# Stage 2: Run database migrations and publish the application
FROM build AS publish

# Install the dotnet-ef tool
RUN dotnet tool install --global dotnet-ef

# Set environment variables required for database migrations
ENV ASPNETCORE_ENVIRONMENT=Production  
ENV ConnectionStrings__MatthewsGalaxyConnectionString="Host=matthewsgalaxy-db; Database=MatthewsGalaxy; Username=postgres; Password=password"

# Publish the application
RUN dotnet publish "MatthewsGalaxy.Server.csproj" -c Release -o /app/publish

# Stage 3: Build runtime image
FROM mcr.microsoft.com/dotnet/sdk:8.0

WORKDIR /app

# Copy the whole project again, to run the database migrations
WORKDIR /src
COPY MatthewsGalaxy.Server/*.csproj ./MatthewsGalaxy.ServerBuildMigrations/

# Restore the dotnet-ef tool dependencies
WORKDIR /src/MatthewsGalaxy.ServerBuildMigrations
RUN dotnet restore

WORKDIR /src
COPY MatthewsGalaxy.Server/ ./MatthewsGalaxy.ServerBuildMigrations/

WORKDIR /src/MatthewsGalaxy.ServerBuildMigrations
RUN dotnet build "MatthewsGalaxy.Server.csproj" -c Release -o /app/build
RUN dotnet publish "MatthewsGalaxy.Server.csproj" -c Release -o /app/publish

# Install the dotnet-ef tool
RUN dotnet tool install --global dotnet-ef

# Add dotnet tools to PATH
ENV PATH="$PATH:/root/.dotnet/tools"

# Synchronize system time and install PostgreSQL client
RUN apt-get update && \
    apt-get install -y --no-install-recommends tzdata && \
    ln -fs /usr/share/zoneinfo/Etc/UTC /etc/localtime && \
    dpkg-reconfigure -f noninteractive tzdata && \
    apt-get install -y postgresql-client && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Append the script content to the startup script
RUN echo "#!/bin/bash" > /app/startup.sh \
    && echo "" >> /app/startup.sh \
    && echo "# Wait for the PostgreSQL database to be ready" >> /app/startup.sh \
    && echo "until pg_isready -h matthewsgalaxy-db -p 5432 -U postgres; do" >> /app/startup.sh \
    && echo "    echo \"Waiting for PostgreSQL to be available...\"" >> /app/startup.sh \
    && echo "    sleep 2" >> /app/startup.sh \
    && echo "done" >> /app/startup.sh \
    && echo "" >> /app/startup.sh \
    && echo "# Run the migration on the database" >> /app/startup.sh \
    && echo "cd /app/MatthewsGalaxy.ServerBuildMigrations" >> /app/startup.sh \
    && echo "until dotnet ef database update; do" >> /app/startup.sh \
    && echo "    echo \"Migration failed. Retrying...\"" >> /app/startup.sh \
    && echo "    sleep 2" >> /app/startup.sh \
    && echo "done" >> /app/startup.sh \
    && echo "" >> /app/startup.sh \
    && echo "# Start the application" >> /app/startup.sh \
    && echo "exec dotnet /app/publish/MatthewsGalaxy.Server.dll" >> /app/startup.sh

# Ensure the startup script is executable
RUN chmod +x /app/startup.sh

# Environment variable for ASP.NET Core environment
ENV ASPNETCORE_ENVIRONMENT=Production

# Expose the application port
EXPOSE 7263

# Entry point to run the startup script
ENTRYPOINT ["/app/startup.sh"]